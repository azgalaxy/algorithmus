//TD4
Algorithme Exercice1
Variable 
	t : tableau[50]
	t2inv: tableau[50]
	counteur: Entier
	e: Entier
	i: Entier
	Finsish: bool
	d: Entier
	n: Entier
	pos2: entier
	p : entier
	pos: Entier
	t_renversé : tableau[]  // Missing the size of the array
	ne : entier
	TP: tableau[p]  // Incorrect, should be tableau[50] or a size variable
	TN : tableau[ne]  // Incorrect, should be tableau[50] or a size variable
	somme: Entier
	
début
	somme <-- 0
	Tantque e < 50 alors
		Ecrire("Entrer un nombre entre -30 and 30")
		Lire(n)
		Si n > 30 ou n < -30 alors
			Ecrire("Il faut la valeur entre -30 et 30")
		Sinon:
			t[i] = n
			i = i + 1
		FinSi
		e = e + 1
	FinTanQue
	
	Pour i de 0 à 49 faire
		somme = somme + t[i]
	FinPour

	Ecrire("La somme est : ", somme)

	// To reverse the array "t"
	Pour i de 0 à 49 faire
		t2inv[49 - i] = t[i]
	FinPour

	// Separating positive and negative values
	ne = 0
	p = 0
	Pour i de 0 à 49 faire
		Si t[i] < 0 alors
			TN[ne] = t[i]
			ne = ne + 1
		Sinon:
			TP[p] = t[i]
			p = p + 1
		FinSi
	FinPour

	// Print TN
	Pour d de 0 à ne - 1 faire
		Ecrire(TN[d])
	FinPour

	// Print TP
	Pour d de 0 à p - 1 faire
		Ecrire(TP[d])
	FinPour

	// Search for the position of the first zero in TP
	pos = -1
	Pour d de 0 à p - 1 faire
		Si TP[d] == 0 alors
			pos = d
			Quitter  // Exit the loop if found
		FinSi
	FinPour

	// Search for the position of the last zero in TP
	pos2 = -1
	Pour d de p - 1 à 0 step -1 faire
		Si TP[d] == 0 alors
			pos2 = d
			Quitter  // Exit the loop if found
		FinSi
	FinPour

	// Create a new list from t
	nouvelle_liste = []
	Pour i de 49 à 0 step -1 faire
		nouvelle_liste.Ajouter(t[i])
	FinPour

	// Sort the array t
	gauche <- 0
	droite <- 49
	Tantque gauche < droite faire
		Si t[gauche] > 0 et t[droite] < 0 alors
			temp <- t[gauche]
			t[gauche] <- t[droite]
			t[droite] <- temp
		FinSi
		Si t[gauche] < 0 alors
			gauche <- gauche + 1
		FinSi
		Si t[droite] > 0 alors
			droite <- droite - 1
		FinSi
	FinTantQue
Fin


//EXERCICE2
Algorithm  EXERCICE2
Variables:
	TM[i]: tableau[30]
	i : Entier
	c : char
	conteur: Entier
	a: entier
	b: entier
	c: entier
	d: entier
	e: entier
	f: entier
	g: entier
	h: entier
	i: entier
	j: entier
	l: entier
	m: entier
	n: entier
	o: entier
	p: entier
	q: entier
	r: entier
	s: entier
	t: entier
	u: entier
	v: entier
	w: entier
	x: entier
	y: entier
	z: entier
début
//TD4_2_1,
	conteur <-- 0
	Pour i de 0 à 29
		Ecrire("Entrer un charactére")
		Lire(c)
		conteur = conteur + 1  
		Si TM[i] = 'z' alors
			break
		FinSi
	FinPour	

	Pour i de 0 à 29 
		Si TM[i] = 'a'
			a <-- a +1 
		FinSi
		
		Si TM[i] = 'b'
			b <-- b +1 
		FinSi
		
		Si TM[i] = 'c'
			c <-- c +1 
		FinSi

		Si TM[i] = 'd'
			d <-- d +1 
		FinSi

		Si TM[i] = 'e'
			e <-- e +1 
		FinSi

		Si TM[i] = 'f'
			i <-- i +1 
		FinSi

		Si TM[i] = 'g'
			g <-- g +1 
		FinSi

		Si TM[i] = 'h'
			h <-- h +1 
		FinSi

		Si TM[i] = 'i'
			i <-- i +1 
		FinSi

		Si TM[i] = 'j'
			j <-- j +1 
		FinSi

		Si TM[i] = 'k'
			k <-- k +1 
		FinSi

		Si TM[i] = 'l'
			l <-- l +1 
		FinSi


		Si TM[i] = 'm'
			m <-- m +1 
		FinSi
		
		Si TM[i] = 'n'
			n <-- n +1 
		FinSi

		Si TM[i] = 'o'
			o <-- o +1 
		FinSi

		Si TM[i] = 'p'
			p <-- p +1 
		FinSi

		Si TM[i] = 'q'
			q <-- q +1 
		FinSi

		Si TM[i] = 'r'
			r <-- r +1 
		FinSi

		Si TM[i] = 's'
			s <-- s +1 
		FinSi

		Si TM[i] = 't'
			t <-- t +1 
		FinSi
	
		Si TM[i] = 'u'
			u <-- u +1 
		FinSi

		Si TM[i] = 'v'
			v <-- v +1 
		FinSi

		Si TM[i] = 'w'
			w <-- w +1 
		FinSi

		Si TM[i] = 'x'
			x <-- x +1 
		FinSi

		Si TM[i] = 'y'
			y <-- y +1 
		FinSi

 
		FinSi
	FinPour











	
	
