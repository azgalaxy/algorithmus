exercice 1:
fonction Somme(a :entier):entier
    var
	  s : entier
	  reste : entier
	début
	  s <-- 0 
	  répeter
	    a <-- a div 10
		reste <-- a % 10
        s <-- s + a		
	  jusqu'à(reste = 0) 
      retourner s
    fin
	
Algorithme exercice1	
    var
	  i, size_tableau : entier 
	  t[31] : entier
	  temp : entier 
début
    répeter  
      écrire("entrer size_tableau:")
	  lire(size_tableau)
	jusqu'à ( size_tableau => 4 et size_tableau <= 31)
     
	pour i de 0 à size_tableau-1 faire
	   si (Somme(t[i]<t[i+1]) alors
	      temp <-- t[i]
		  t[i] <-- t[i+1]
		  t[i+1] <-- temp
	   finSi
	finPour
	
	écrire("le tableau arrangé:")
	pour i de 0 à size_tableau-1 faire 
	   écrire(t[i])
	finPour
Fin	
	
exercice 2 :
Algorithme exercice2
    var 
	  i , chaine_size: entier
      ent_nombre : entier
      chaine_nombre : chaine
	  chaine_nombre_permuté : chaine
    début
	  écrire("entrer un nombre entier:")
	  lire(ent_nombre)
	  
	  chaine_nombre <-- convch(chaine_nombre)
	  chaine_size <-- long(chaine_nombre)
	  
	  pour i de 0 à chaine_size-1 faire
	    chaine_nombre_permuté[chaine_size-1-i] <--chaine_nombre[i]
      finPour
	     
	

exercice 3 :
Algorithme Anagramme
    var 
	 i , j: entier 
	 ch1 , ch2 : chaines
    
	début
     répeter	
       écrire("entrer une chaine1")
       lire(ch1)
       écrire("entrer une chaine2")
       lire(ch2)
     jusqu'à ((ch1>'a' et ch1<'z') et (ch1>'a' et ch1<'z'))

	  si (long(ch1) != long(ch2)) alors
	    écrire("les deux mots ne sont pas des anagrammes")
	  sinon 
	    pour i de 0 à long(ch1)-1 alors
		  pour j de 0 à long(ch1)-1 alors 
            si (ch1[i] != ch2[j]) alors
               écrire("les 2 mots ne sont pas des anagrammes")
            sinon 
               écrire("les 2 mots sont des anagrammes")
            finSi			   
     	  finPour
	    finPour
	  finSi
	fin

exercice 4 :
algorithme codage
    variables
        i, j, size_tableau : entier
        tableau1, tableau2 : tableau[1..20] de caractere
        temp : caractere
        min : entier

    debut
        repeter
            ecrire("entrez la taille du tableau : ")
            lire(size_tableau)
        jusqu'a (size_tableau >= 0 et size_tableau <= 20)

        pour i de 1 a size_tableau faire
            repeter
                ecrire("entrez un caractere minuscule : ")
                lire(tableau1[i])
            jusqu'a(tableau1[i] >= 'A' et tableau1[i] <= 'Z')
        finPour

        pour i de 1 a size_tableau - 1
            min <- i

            pour j de i + 1 a size_tableau faire
                si tableau1[j] < tableau1[min] alors
                    min <- j
                finSi
            finPour

            temp <- tableau1[i]
            tableau1[i] <- tableau1[min]
            tableau1[min] <- temp

            tableau2[i] <- tableau1[i]
            tableau1[i] <- 'a'
        finPour

        tableau2[size_tableau] <- tableau1[size_tableau]
        tableau1[size_tableau] <- 'a'

        ecrire("le tableau 1 : ")
        pour i de 1 a size_tableau faire
            ecrire(tableau1[i])
        finPour

        ecrire(" le tableau 2 : ") 
        pour i de 1 a size_tableau faire
            ecrire(tableau2[i])
        finPour
    fin


exercice 5 :
algorithme tri_decroissant
    var
       i, j, max_index, table_size : entier
       T[30], V[30] : tableau[1..30] d'entier

    debut
        repeter
            ecrire("entrer la taille du tableau : ")
            lire(table_size)
        jusqu'a(table_size > 30 ou table_size < 5)

        pour i de 1 a table_size faire
            ecrire("entrer T[i] : ")
			lire(T[i])
        finPour

        pour i de 1 a table_size faire
            max_index <- 1

            pour j de 2 a table_size faire
                si (T[j] > T[max_index]) alors
                    max_index <- j
                finSi
            finPour

            V[i] <- T[max_index]
            T[max_index] <- -1
        finPour

        ecrire("Tableau trié par ordre décroissant est : ")
        pour i de 1 a table_size faire
            ecrire(V[i])
        finPour
    fin

exercice 6 :
algorithme tri_decroissant_de_moyennes
    variables
        i, j, N : entier
        tempName : chaine
        tempMoyenne : reel
        T[50] : tableau[1..50]  : chaines
        M[50] : tableau[1..50] : reels

    debut
        repeter
            ecrire("entrez la taille du tableau : ")
            lire(N)
        jusqu'a (N > 50 ou N < 0)

        pour i de de 1 a N faire
            ecrire("entrer le nom de l'éleve ", i, " : ")
            lire(T[i])

            ecrire("Entrez la moyenne de l'élève ", i, " : ")
            lire(M[i])
        finPour

        pour i de 1 a N - 1 faire
            pour j de i + 1 a N faire
                si ((M[j] > M[i]) ou (M[j] = M[i] et T[i] > T[j])) alors
                    tempName <- T[i]
                    T[i] <- T[j]
                    T[j] <- tempName

                    tempMoyenne <- M[i]
                    M[i] <- M[j]
                    M[j] <- tempMoyenne
                finSi
            finPour
        finPour

        ecrire("Noms des élèves et leurs moyennes triées :")
        pour i de 1 a N faire
            ecrire(T[i], " : ", M[i])
        finPour
    fin
   
exerccice 7 :
Algorithme Mots
    var 
      i , n , fin , début: entiers
      Ph , temp : chaine
    début
      répeter 
        écrire("entrer une chaine composé de caractéres et d'espaces")
        lire(Ph)
      jusqu'à (((Ph=>'a' et ph<='z') et (Ph=>'A' et ph<='Z')) ou ord(Ph)=32)
      
      n <-- long(Ph)
      
      pour i de 0 à n-1 faire
        si(ord(Ph[i])=32 et ord(Ph[i+1])=32) alors
          fin <-- i
          début <-- i+2		  
       	finSi
		répeter
          si(Ph[:i]<Ph[i+2:]) alors		
		     temp <-- Ph[:i]
			 Ph[:i] <-- Ph[i+1:]
		  finSi
		jusqu'à (ord(Ph[i])=32 et ord(Ph[i+1])=32)  
      finPour 	  
	fin
	
exercice 8 : 
algorithme fusionnement_et_afficher
    var
        N, M, i, j, k , taille _totale: entier
        T, V, W [50]: entiers
    debut
        repeter
            ecrire("Entrez la taille du tableau T (4 < N < 31) : ")
            lire(N)
        jusqu'a (N > 4 et N < 31)

        repeter
            ecrire("Entrez la taille du tableau V (4 < M < 31) : ")
            lire(M)
        jusqu'a(M > 4 et M < 31)

        i <- 1
        j <- 1
        k <- 1

        ecrire("Saisissez les éléments du tableau T (triés) :")
        pour i de 0 a N - 1 faire
            ecrire("T[", i, "] : ")
            lire(T[i])
        finPour

        ecrire("Saisissez les éléments du tableau V (triés) :")
        pour i de 0 a M - 1 faire 
            ecrire("V[", i, "] : ")
            lire(V[i])
        finPour

        tantque i <= N et j <= M faire
            si T[i] <= V[j] alors
                W[k] <- T[i]
                i <- i + 1
            sinon
                W[k] <- V[j]
                j <- j + 1
            finSi
            k <- k + 1
        finTantQue

        tantque i <= N faire
            W[k] <- T[i]
            i <- i + 1
            k <- k + 1
        finTantQue

        tantque j <= M faire
            W[k] <- V[j]
            j <- j + 1
            k <- k + 1
        finTantQue
		
		taille _totale <- N+M

        ecrire("Tableau fusionné W :")
        pour i de 1 a taille _totale faire
            ecrire(W[i])
        finPour
    fin


    	 